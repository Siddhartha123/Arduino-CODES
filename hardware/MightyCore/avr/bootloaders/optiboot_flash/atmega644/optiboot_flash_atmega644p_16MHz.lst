
optiboot_atmega644p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000fe64  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000264  0000fc00  0000fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0000fffe  0000fffe  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  000002fa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000030b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  0000033b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000298  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000384  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001fc  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b4  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
	// Allow convenient way of calling do_spm function - jump table,
	//   so entry to this function will always be here, indepedent of compilation,
	//   features etc
	asm volatile (
    fc00:	01 c0       	rjmp	.+2      	; 0xfc04 <main>
    fc02:	dc c0       	rjmp	.+440    	; 0xfdbc <do_spm>

0000fc04 <main>:
	);
}


/* main program starts here */
int main(void) {
    fc04:	1f 92       	push	r1
    fc06:	cd b7       	in	r28, 0x3d	; 61
    fc08:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    fc0a:	11 24       	eor	r1, r1

#if defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)
   ch = MCUCSR;
   MCUCSR = 0;
#else
  ch = MCUSR;
    fc0c:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    fc0e:	14 be       	out	0x34, r1	; 52
#endif

 
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    fc10:	98 2f       	mov	r25, r24
    fc12:	9d 70       	andi	r25, 0x0D	; 13
    fc14:	09 f0       	breq	.+2      	; 0xfc18 <main+0x14>
      appStart(ch);
    fc16:	0a d1       	rcall	.+532    	; 0xfe2c <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fc18:	85 e0       	ldi	r24, 0x05	; 5
    fc1a:	80 93 81 00 	sts	0x0081, r24
  UCSRA = _BV(U2X); //Double speed mode USART
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#else
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    fc1e:	82 e0       	ldi	r24, 0x02	; 2
    fc20:	80 93 c0 00 	sts	0x00C0, r24
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    fc24:	88 e1       	ldi	r24, 0x18	; 24
    fc26:	80 93 c1 00 	sts	0x00C1, r24
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    fc2a:	86 e0       	ldi	r24, 0x06	; 6
    fc2c:	80 93 c2 00 	sts	0x00C2, r24
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    fc30:	80 e1       	ldi	r24, 0x10	; 16
    fc32:	80 93 c4 00 	sts	0x00C4, r24
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    fc36:	8e e0       	ldi	r24, 0x0E	; 14
    fc38:	e4 d0       	rcall	.+456    	; 0xfe02 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    fc3a:	20 9a       	sbi	0x04, 0	; 4
    fc3c:	24 e0       	ldi	r18, 0x04	; 4
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc3e:	80 e3       	ldi	r24, 0x30	; 48
    fc40:	9c ef       	ldi	r25, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fc42:	31 e0       	ldi	r19, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    fc44:	90 93 85 00 	sts	0x0085, r25
    fc48:	80 93 84 00 	sts	0x0084, r24
    TIFR1 = _BV(TOV1);
    fc4c:	36 bb       	out	0x16, r19	; 22
    while(!(TIFR1 & _BV(TOV1)));
    fc4e:	b0 9b       	sbis	0x16, 0	; 22
    fc50:	fe cf       	rjmp	.-4      	; 0xfc4e <main+0x4a>
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    fc52:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc54:	a8 95       	wdr
    fc56:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    fc58:	a9 f7       	brne	.-22     	; 0xfc44 <main+0x40>
    fc5a:	81 2c       	mov	r8, r1
    fc5c:	91 2c       	mov	r9, r1
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc5e:	c5 d0       	rcall	.+394    	; 0xfdea <getch>

    if(ch == STK_GET_PARAMETER) {
    fc60:	81 34       	cpi	r24, 0x41	; 65
    fc62:	79 f4       	brne	.+30     	; 0xfc82 <main+0x7e>
      unsigned char which = getch();
    fc64:	c2 d0       	rcall	.+388    	; 0xfdea <getch>
      verifySpace();
    fc66:	89 83       	std	Y+1, r24	; 0x01
    fc68:	d2 d0       	rcall	.+420    	; 0xfe0e <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    fc6a:	89 81       	ldd	r24, Y+1	; 0x01
    fc6c:	82 38       	cpi	r24, 0x82	; 130
    fc6e:	11 f4       	brne	.+4      	; 0xfc74 <main+0x70>
	  putch(optiboot_version & 0xFF);
    fc70:	82 e0       	ldi	r24, 0x02	; 2
    fc72:	05 c0       	rjmp	.+10     	; 0xfc7e <main+0x7a>
      } else if (which == 0x81) {
    fc74:	81 38       	cpi	r24, 0x81	; 129
    fc76:	11 f4       	brne	.+4      	; 0xfc7c <main+0x78>
	  putch(optiboot_version >> 8);
    fc78:	86 e0       	ldi	r24, 0x06	; 6
    fc7a:	01 c0       	rjmp	.+2      	; 0xfc7e <main+0x7a>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    fc7c:	83 e0       	ldi	r24, 0x03	; 3
    fc7e:	ae d0       	rcall	.+348    	; 0xfddc <putch>
    fc80:	9a c0       	rjmp	.+308    	; 0xfdb6 <main+0x1b2>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    fc82:	82 34       	cpi	r24, 0x42	; 66
    fc84:	11 f4       	brne	.+4      	; 0xfc8a <main+0x86>
      // SET DEVICE is ignored
      getNch(20);
    fc86:	84 e1       	ldi	r24, 0x14	; 20
    fc88:	03 c0       	rjmp	.+6      	; 0xfc90 <main+0x8c>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fc8a:	85 34       	cpi	r24, 0x45	; 69
    fc8c:	19 f4       	brne	.+6      	; 0xfc94 <main+0x90>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc8e:	85 e0       	ldi	r24, 0x05	; 5
    fc90:	c6 d0       	rcall	.+396    	; 0xfe1e <getNch>
    fc92:	91 c0       	rjmp	.+290    	; 0xfdb6 <main+0x1b2>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fc94:	85 35       	cpi	r24, 0x55	; 85
    fc96:	41 f4       	brne	.+16     	; 0xfca8 <main+0xa4>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    fc98:	a8 d0       	rcall	.+336    	; 0xfdea <getch>
    fc9a:	88 2e       	mov	r8, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    fc9c:	a6 d0       	rcall	.+332    	; 0xfdea <getch>
    fc9e:	91 2c       	mov	r9, r1
    fca0:	98 2a       	or	r9, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    fca2:	88 0c       	add	r8, r8
    fca4:	99 1c       	adc	r9, r9
    fca6:	86 c0       	rjmp	.+268    	; 0xfdb4 <main+0x1b0>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    fca8:	86 35       	cpi	r24, 0x56	; 86
    fcaa:	21 f4       	brne	.+8      	; 0xfcb4 <main+0xb0>
      // UNIVERSAL command is ignored
      getNch(4);
    fcac:	84 e0       	ldi	r24, 0x04	; 4
    fcae:	b7 d0       	rcall	.+366    	; 0xfe1e <getNch>
      putch(0x00);
    fcb0:	80 e0       	ldi	r24, 0x00	; 0
    fcb2:	e5 cf       	rjmp	.-54     	; 0xfc7e <main+0x7a>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    fcb4:	84 36       	cpi	r24, 0x64	; 100
    fcb6:	09 f0       	breq	.+2      	; 0xfcba <main+0xb6>
    fcb8:	4a c0       	rjmp	.+148    	; 0xfd4e <main+0x14a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fcba:	97 d0       	rcall	.+302    	; 0xfdea <getch>
    fcbc:	e8 2e       	mov	r14, r24
    fcbe:	f1 2c       	mov	r15, r1
    fcc0:	fe 2c       	mov	r15, r14
    fcc2:	ee 24       	eor	r14, r14
    fcc4:	92 d0       	rcall	.+292    	; 0xfdea <getch>
    fcc6:	e8 2a       	or	r14, r24
      savelength = length;
      desttype = getch();
    fcc8:	90 d0       	rcall	.+288    	; 0xfdea <getch>
    fcca:	b8 2e       	mov	r11, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fccc:	87 01       	movw	r16, r14
      savelength = length;
      desttype = getch();
    fcce:	c1 2c       	mov	r12, r1
    fcd0:	dd 24       	eor	r13, r13
    fcd2:	d3 94       	inc	r13

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fcd4:	8a d0       	rcall	.+276    	; 0xfdea <getch>
    fcd6:	f6 01       	movw	r30, r12
    fcd8:	81 93       	st	Z+, r24
    fcda:	6f 01       	movw	r12, r30
      while (--length);
    fcdc:	01 50       	subi	r16, 0x01	; 1
    fcde:	11 09       	sbc	r17, r1
    fce0:	01 15       	cp	r16, r1
    fce2:	11 05       	cpc	r17, r1
    fce4:	b9 f7       	brne	.-18     	; 0xfcd4 <main+0xd0>

      // Read command terminator, start reply
      verifySpace();
    fce6:	93 d0       	rcall	.+294    	; 0xfe0e <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    fce8:	f5 e4       	ldi	r31, 0x45	; 69
    fcea:	bf 12       	cpse	r11, r31
    fcec:	12 c0       	rjmp	.+36     	; 0xfd12 <main+0x10e>
    fcee:	e8 0c       	add	r14, r8
    fcf0:	f9 1c       	adc	r15, r9
    fcf2:	84 01       	movw	r16, r8
    fcf4:	c1 2c       	mov	r12, r1
    fcf6:	dd 24       	eor	r13, r13
    fcf8:	d3 94       	inc	r13
    case 'E': // EEPROM
#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
        while(len--) {
    fcfa:	0e 15       	cp	r16, r14
    fcfc:	1f 05       	cpc	r17, r15
    fcfe:	09 f4       	brne	.+2      	; 0xfd02 <main+0xfe>
    fd00:	5a c0       	rjmp	.+180    	; 0xfdb6 <main+0x1b2>
	    eeprom_write_byte((uint8_t *)(address++), *mybuff++);
    fd02:	f6 01       	movw	r30, r12
    fd04:	61 91       	ld	r22, Z+
    fd06:	6f 01       	movw	r12, r30
    fd08:	c8 01       	movw	r24, r16
    fd0a:	9e d0       	rcall	.+316    	; 0xfe48 <__eewr_byte_m644p>
    fd0c:	0f 5f       	subi	r16, 0xFF	; 255
    fd0e:	1f 4f       	sbci	r17, 0xFF	; 255
    fd10:	f4 cf       	rjmp	.-24     	; 0xfcfa <main+0xf6>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
    fd12:	40 e0       	ldi	r20, 0x00	; 0
    fd14:	50 e0       	ldi	r21, 0x00	; 0
    fd16:	63 e0       	ldi	r22, 0x03	; 3
    fd18:	c4 01       	movw	r24, r8
    fd1a:	50 d0       	rcall	.+160    	; 0xfdbc <do_spm>
    fd1c:	00 e0       	ldi	r16, 0x00	; 0
    fd1e:	10 e0       	ldi	r17, 0x00	; 0
    fd20:	f8 01       	movw	r30, r16
    fd22:	f3 95       	inc	r31
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    fd24:	40 81       	ld	r20, Z
    fd26:	31 96       	adiw	r30, 0x01	; 1
		a |= (*bufPtr++) << 8;
    fd28:	80 81       	ld	r24, Z
    fd2a:	50 e0       	ldi	r21, 0x00	; 0
    fd2c:	58 2b       	or	r21, r24
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
    fd2e:	61 e0       	ldi	r22, 0x01	; 1
    fd30:	c8 01       	movw	r24, r16
    fd32:	88 0d       	add	r24, r8
    fd34:	99 1d       	adc	r25, r9
    fd36:	42 d0       	rcall	.+132    	; 0xfdbc <do_spm>
    fd38:	0e 5f       	subi	r16, 0xFE	; 254
    fd3a:	1f 4f       	sbci	r17, 0xFF	; 255
		addrPtr += 2;
	    } while (len -= 2);
    fd3c:	e0 16       	cp	r14, r16
    fd3e:	f1 06       	cpc	r15, r17
    fd40:	79 f7       	brne	.-34     	; 0xfd20 <main+0x11c>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
    fd42:	40 e0       	ldi	r20, 0x00	; 0
    fd44:	50 e0       	ldi	r21, 0x00	; 0
    fd46:	65 e0       	ldi	r22, 0x05	; 5
    fd48:	c4 01       	movw	r24, r8
    fd4a:	38 d0       	rcall	.+112    	; 0xfdbc <do_spm>
    fd4c:	34 c0       	rjmp	.+104    	; 0xfdb6 <main+0x1b2>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fd4e:	84 37       	cpi	r24, 0x74	; 116
    fd50:	21 f5       	brne	.+72     	; 0xfd9a <main+0x196>
      uint8_t desttype;
      GETLENGTH(length);
    fd52:	4b d0       	rcall	.+150    	; 0xfdea <getch>
    fd54:	08 2f       	mov	r16, r24
    fd56:	10 e0       	ldi	r17, 0x00	; 0
    fd58:	10 2f       	mov	r17, r16
    fd5a:	00 27       	eor	r16, r16
    fd5c:	46 d0       	rcall	.+140    	; 0xfdea <getch>
    fd5e:	08 2b       	or	r16, r24

      desttype = getch();
    fd60:	44 d0       	rcall	.+136    	; 0xfdea <getch>

      verifySpace();
    fd62:	89 83       	std	Y+1, r24	; 0x01
    fd64:	54 d0       	rcall	.+168    	; 0xfe0e <verifySpace>

static inline void read_mem(uint8_t memtype, uint16_t address, pagelen_t length)
{
    uint8_t ch;

    switch (memtype) {
    fd66:	89 81       	ldd	r24, Y+1	; 0x01
    fd68:	74 01       	movw	r14, r8
    fd6a:	85 34       	cpi	r24, 0x45	; 69
    fd6c:	61 f4       	brne	.+24     	; 0xfd86 <main+0x182>

#if defined(SUPPORT_EEPROM) || defined(BIGBOOT)
    case 'E': // EEPROM
	do {
	    putch(eeprom_read_byte((uint8_t *)(address++)));
    fd6e:	c7 01       	movw	r24, r14
    fd70:	63 d0       	rcall	.+198    	; 0xfe38 <__eerd_byte_m644p>
    fd72:	34 d0       	rcall	.+104    	; 0xfddc <putch>
	} while (--length);
    fd74:	01 50       	subi	r16, 0x01	; 1
    fd76:	11 09       	sbc	r17, r1
    fd78:	ff ef       	ldi	r31, 0xFF	; 255
    fd7a:	ef 1a       	sub	r14, r31
    fd7c:	ff 0a       	sbc	r15, r31
    fd7e:	01 15       	cp	r16, r1
    fd80:	11 05       	cpc	r17, r1
    fd82:	a9 f7       	brne	.-22     	; 0xfd6e <main+0x16a>
    fd84:	18 c0       	rjmp	.+48     	; 0xfdb6 <main+0x1b2>
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    fd86:	f7 01       	movw	r30, r14
    fd88:	85 91       	lpm	r24, Z+
    fd8a:	7f 01       	movw	r14, r30
    fd8c:	27 d0       	rcall	.+78     	; 0xfddc <putch>
	} while (--length);
    fd8e:	01 50       	subi	r16, 0x01	; 1
    fd90:	11 09       	sbc	r17, r1
    fd92:	01 15       	cp	r16, r1
    fd94:	11 05       	cpc	r17, r1
    fd96:	b9 f7       	brne	.-18     	; 0xfd86 <main+0x182>
    fd98:	0e c0       	rjmp	.+28     	; 0xfdb6 <main+0x1b2>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fd9a:	85 37       	cpi	r24, 0x75	; 117
    fd9c:	39 f4       	brne	.+14     	; 0xfdac <main+0x1a8>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fd9e:	37 d0       	rcall	.+110    	; 0xfe0e <verifySpace>
      putch(SIGNATURE_0);
    fda0:	8e e1       	ldi	r24, 0x1E	; 30
    fda2:	1c d0       	rcall	.+56     	; 0xfddc <putch>
      putch(SIGNATURE_1);
    fda4:	86 e9       	ldi	r24, 0x96	; 150
    fda6:	1a d0       	rcall	.+52     	; 0xfddc <putch>
      putch(SIGNATURE_2);
    fda8:	8a e0       	ldi	r24, 0x0A	; 10
    fdaa:	69 cf       	rjmp	.-302    	; 0xfc7e <main+0x7a>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    fdac:	81 35       	cpi	r24, 0x51	; 81
    fdae:	11 f4       	brne	.+4      	; 0xfdb4 <main+0x1b0>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fdb0:	88 e0       	ldi	r24, 0x08	; 8
    fdb2:	27 d0       	rcall	.+78     	; 0xfe02 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fdb4:	2c d0       	rcall	.+88     	; 0xfe0e <verifySpace>
    }
    putch(STK_OK);
    fdb6:	80 e1       	ldi	r24, 0x10	; 16
    fdb8:	11 d0       	rcall	.+34     	; 0xfddc <putch>
  }
    fdba:	51 cf       	rjmp	.-350    	; 0xfc5e <main+0x5a>

0000fdbc <do_spm>:
 *   you could do fill-erase-write sequence with data!=0 in ERASE and
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    fdbc:	fc 01       	movw	r30, r24
    fdbe:	0a 01       	movw	r0, r20
    fdc0:	67 bf       	out	0x37, r22	; 55
    fdc2:	e8 95       	spm
    fdc4:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    fdc6:	07 b6       	in	r0, 0x37	; 55
    fdc8:	00 fc       	sbrc	r0, 0
    fdca:	fd cf       	rjmp	.-6      	; 0xfdc6 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    fdcc:	66 70       	andi	r22, 0x06	; 6
    fdce:	29 f0       	breq	.+10     	; 0xfdda <do_spm+0x1e>
    fdd0:	45 2b       	or	r20, r21
    fdd2:	19 f4       	brne	.+6      	; 0xfdda <do_spm+0x1e>
      // Reenable read access to flash
      boot_rww_enable();
    fdd4:	81 e1       	ldi	r24, 0x11	; 17
    fdd6:	87 bf       	out	0x37, r24	; 55
    fdd8:	e8 95       	spm
    fdda:	08 95       	ret

0000fddc <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    fddc:	90 91 c0 00 	lds	r25, 0x00C0
    fde0:	95 ff       	sbrs	r25, 5
    fde2:	fc cf       	rjmp	.-8      	; 0xfddc <putch>
  UART_UDR = ch;
    fde4:	80 93 c6 00 	sts	0x00C6, r24
    fde8:	08 95       	ret

0000fdea <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    fdea:	80 91 c0 00 	lds	r24, 0x00C0
    fdee:	87 ff       	sbrs	r24, 7
    fdf0:	fc cf       	rjmp	.-8      	; 0xfdea <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    fdf2:	80 91 c0 00 	lds	r24, 0x00C0
    fdf6:	84 fd       	sbrc	r24, 4
    fdf8:	01 c0       	rjmp	.+2      	; 0xfdfc <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fdfa:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    fdfc:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fe00:	08 95       	ret

0000fe02 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fe02:	e0 e6       	ldi	r30, 0x60	; 96
    fe04:	f0 e0       	ldi	r31, 0x00	; 0
    fe06:	98 e1       	ldi	r25, 0x18	; 24
    fe08:	90 83       	st	Z, r25
  WDTCSR = x;
    fe0a:	80 83       	st	Z, r24
    fe0c:	08 95       	ret

0000fe0e <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fe0e:	ed df       	rcall	.-38     	; 0xfdea <getch>
    fe10:	80 32       	cpi	r24, 0x20	; 32
    fe12:	19 f0       	breq	.+6      	; 0xfe1a <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fe14:	88 e0       	ldi	r24, 0x08	; 8
    fe16:	f5 df       	rcall	.-22     	; 0xfe02 <watchdogConfig>
    fe18:	ff cf       	rjmp	.-2      	; 0xfe18 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fe1a:	84 e1       	ldi	r24, 0x14	; 20
    fe1c:	df cf       	rjmp	.-66     	; 0xfddc <putch>

0000fe1e <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fe1e:	cf 93       	push	r28
    fe20:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    fe22:	e3 df       	rcall	.-58     	; 0xfdea <getch>
    fe24:	c1 50       	subi	r28, 0x01	; 1
    fe26:	e9 f7       	brne	.-6      	; 0xfe22 <getNch+0x4>
  verifySpace();
}
    fe28:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    fe2a:	f1 cf       	rjmp	.-30     	; 0xfe0e <verifySpace>

0000fe2c <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    fe2c:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    fe2e:	80 e0       	ldi	r24, 0x00	; 0
    fe30:	e8 df       	rcall	.-48     	; 0xfe02 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    fe32:	e0 e0       	ldi	r30, 0x00	; 0
    fe34:	ff 27       	eor	r31, r31
    fe36:	09 94       	ijmp

0000fe38 <__eerd_byte_m644p>:
    fe38:	f9 99       	sbic	0x1f, 1	; 31
    fe3a:	fe cf       	rjmp	.-4      	; 0xfe38 <__eerd_byte_m644p>
    fe3c:	92 bd       	out	0x22, r25	; 34
    fe3e:	81 bd       	out	0x21, r24	; 33
    fe40:	f8 9a       	sbi	0x1f, 0	; 31
    fe42:	99 27       	eor	r25, r25
    fe44:	80 b5       	in	r24, 0x20	; 32
    fe46:	08 95       	ret

0000fe48 <__eewr_byte_m644p>:
    fe48:	26 2f       	mov	r18, r22

0000fe4a <__eewr_r18_m644p>:
    fe4a:	f9 99       	sbic	0x1f, 1	; 31
    fe4c:	fe cf       	rjmp	.-4      	; 0xfe4a <__eewr_r18_m644p>
    fe4e:	1f ba       	out	0x1f, r1	; 31
    fe50:	92 bd       	out	0x22, r25	; 34
    fe52:	81 bd       	out	0x21, r24	; 33
    fe54:	20 bd       	out	0x20, r18	; 32
    fe56:	0f b6       	in	r0, 0x3f	; 63
    fe58:	f8 94       	cli
    fe5a:	fa 9a       	sbi	0x1f, 2	; 31
    fe5c:	f9 9a       	sbi	0x1f, 1	; 31
    fe5e:	0f be       	out	0x3f, r0	; 63
    fe60:	01 96       	adiw	r24, 0x01	; 1
    fe62:	08 95       	ret
