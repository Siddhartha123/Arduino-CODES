
optiboot_atmega8535.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00001e00  00001e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00001ffe  00001ffe  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00001fc6  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000011  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000026d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000066e  00000000  00000000  0000029d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000269  00000000  00000000  0000090b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033a  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d8  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000419  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001555  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
	// Allow convenient way of calling do_spm function - jump table,
	//   so entry to this function will always be here, indepedent of compilation,
	//   features etc
	asm volatile (
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <main>
    1e02:	ad c0       	rjmp	.+346    	; 0x1f5e <do_spm>

00001e04 <main>:
	);
}


/* main program starts here */
int main(void) {
    1e04:	1f 92       	push	r1
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    1e0a:	11 24       	eor	r1, r1
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  SP=RAMEND;  // This is done by hardware reset
    1e0c:	8f e5       	ldi	r24, 0x5F	; 95
    1e0e:	92 e0       	ldi	r25, 0x02	; 2
    1e10:	9e bf       	out	0x3e, r25	; 62
    1e12:	8d bf       	out	0x3d, r24	; 61
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */

#if defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)
   ch = MCUCSR;
    1e14:	84 b7       	in	r24, 0x34	; 52
   MCUCSR = 0;
    1e16:	14 be       	out	0x34, r1	; 52
  ch = MCUSR;
  MCUSR = 0;
#endif

 
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    1e18:	98 2f       	mov	r25, r24
    1e1a:	9d 70       	andi	r25, 0x0D	; 13
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <main+0x1c>
      appStart(ch);
    1e1e:	cd d0       	rcall	.+410    	; 0x1fba <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e20:	85 e0       	ldi	r24, 0x05	; 5
    1e22:	8e bd       	out	0x2e, r24	; 46
#endif

#ifndef SOFT_UART
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
  UCSRA = _BV(U2X); //Double speed mode USART
    1e24:	82 e0       	ldi	r24, 0x02	; 2
    1e26:	8b b9       	out	0x0b, r24	; 11
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    1e28:	88 e1       	ldi	r24, 0x18	; 24
    1e2a:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    1e2c:	86 e8       	ldi	r24, 0x86	; 134
    1e2e:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
    1e30:	85 e1       	ldi	r24, 0x15	; 21
    1e32:	89 b9       	out	0x09, r24	; 9
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    1e34:	8e e0       	ldi	r24, 0x0E	; 14
    1e36:	ae d0       	rcall	.+348    	; 0x1f94 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1e38:	b8 9a       	sbi	0x17, 0	; 23
    1e3a:	24 e0       	ldi	r18, 0x04	; 4
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e3c:	8c e3       	ldi	r24, 0x3C	; 60
    1e3e:	9b ef       	ldi	r25, 0xFB	; 251
    TIFR1 = _BV(TOV1);
    1e40:	54 e0       	ldi	r21, 0x04	; 4
    while(!(TIFR1 & _BV(TOV1)));
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    1e42:	41 e0       	ldi	r20, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    1e44:	9d bd       	out	0x2d, r25	; 45
    1e46:	8c bd       	out	0x2c, r24	; 44
    TIFR1 = _BV(TOV1);
    1e48:	58 bf       	out	0x38, r21	; 56
    while(!(TIFR1 & _BV(TOV1)));
    1e4a:	08 b6       	in	r0, 0x38	; 56
    1e4c:	02 fe       	sbrs	r0, 2
    1e4e:	fd cf       	rjmp	.-6      	; 0x1e4a <main+0x46>
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || defined (__AVR_ATmega32__)
    LED_PORT ^= _BV(LED);
    1e50:	38 b3       	in	r19, 0x18	; 24
    1e52:	34 27       	eor	r19, r20
    1e54:	38 bb       	out	0x18, r19	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e56:	a8 95       	wdr
    1e58:	21 50       	subi	r18, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    1e5a:	a1 f7       	brne	.-24     	; 0x1e44 <main+0x40>
    1e5c:	a1 2c       	mov	r10, r1
    1e5e:	b1 2c       	mov	r11, r1
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e60:	92 d0       	rcall	.+292    	; 0x1f86 <getch>

    if(ch == STK_GET_PARAMETER) {
    1e62:	81 34       	cpi	r24, 0x41	; 65
    1e64:	79 f4       	brne	.+30     	; 0x1e84 <main+0x80>
      unsigned char which = getch();
    1e66:	8f d0       	rcall	.+286    	; 0x1f86 <getch>
      verifySpace();
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	98 d0       	rcall	.+304    	; 0x1f9c <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	82 38       	cpi	r24, 0x82	; 130
    1e70:	11 f4       	brne	.+4      	; 0x1e76 <main+0x72>
	  putch(optiboot_version & 0xFF);
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	05 c0       	rjmp	.+10     	; 0x1e80 <main+0x7c>
      } else if (which == 0x81) {
    1e76:	81 38       	cpi	r24, 0x81	; 129
    1e78:	11 f4       	brne	.+4      	; 0x1e7e <main+0x7a>
	  putch(optiboot_version >> 8);
    1e7a:	86 e0       	ldi	r24, 0x06	; 6
    1e7c:	01 c0       	rjmp	.+2      	; 0x1e80 <main+0x7c>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	7e d0       	rcall	.+252    	; 0x1f7e <putch>
    1e82:	6a c0       	rjmp	.+212    	; 0x1f58 <main+0x154>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    1e84:	82 34       	cpi	r24, 0x42	; 66
    1e86:	11 f4       	brne	.+4      	; 0x1e8c <main+0x88>
      // SET DEVICE is ignored
      getNch(20);
    1e88:	84 e1       	ldi	r24, 0x14	; 20
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <main+0x8e>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    1e8c:	85 34       	cpi	r24, 0x45	; 69
    1e8e:	19 f4       	brne	.+6      	; 0x1e96 <main+0x92>
      // SET DEVICE EXT is ignored
      getNch(5);
    1e90:	85 e0       	ldi	r24, 0x05	; 5
    1e92:	8c d0       	rcall	.+280    	; 0x1fac <getNch>
    1e94:	61 c0       	rjmp	.+194    	; 0x1f58 <main+0x154>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    1e96:	85 35       	cpi	r24, 0x55	; 85
    1e98:	41 f4       	brne	.+16     	; 0x1eaa <main+0xa6>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    1e9a:	75 d0       	rcall	.+234    	; 0x1f86 <getch>
    1e9c:	a8 2e       	mov	r10, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    1e9e:	73 d0       	rcall	.+230    	; 0x1f86 <getch>
    1ea0:	b1 2c       	mov	r11, r1
    1ea2:	b8 2a       	or	r11, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    1ea4:	aa 0c       	add	r10, r10
    1ea6:	bb 1c       	adc	r11, r11
    1ea8:	56 c0       	rjmp	.+172    	; 0x1f56 <main+0x152>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    1eaa:	86 35       	cpi	r24, 0x56	; 86
    1eac:	21 f4       	brne	.+8      	; 0x1eb6 <main+0xb2>
      // UNIVERSAL command is ignored
      getNch(4);
    1eae:	84 e0       	ldi	r24, 0x04	; 4
    1eb0:	7d d0       	rcall	.+250    	; 0x1fac <getNch>
      putch(0x00);
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	e5 cf       	rjmp	.-54     	; 0x1e80 <main+0x7c>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    1eb6:	84 36       	cpi	r24, 0x64	; 100
    1eb8:	91 f5       	brne	.+100    	; 0x1f1e <main+0x11a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1eba:	65 d0       	rcall	.+202    	; 0x1f86 <getch>
    1ebc:	64 d0       	rcall	.+200    	; 0x1f86 <getch>
    1ebe:	d8 2e       	mov	r13, r24
      savelength = length;
      desttype = getch();
    1ec0:	62 d0       	rcall	.+196    	; 0x1f86 <getch>
    1ec2:	f8 2e       	mov	r15, r24
    1ec4:	00 e6       	ldi	r16, 0x60	; 96
    1ec6:	10 e0       	ldi	r17, 0x00	; 0
    1ec8:	80 e6       	ldi	r24, 0x60	; 96
    1eca:	d8 0e       	add	r13, r24

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    1ecc:	5c d0       	rcall	.+184    	; 0x1f86 <getch>
    1ece:	f8 01       	movw	r30, r16
    1ed0:	81 93       	st	Z+, r24
    1ed2:	8f 01       	movw	r16, r30
      while (--length);
    1ed4:	de 12       	cpse	r13, r30
    1ed6:	fa cf       	rjmp	.-12     	; 0x1ecc <main+0xc8>

      // Read command terminator, start reply
      verifySpace();
    1ed8:	61 d0       	rcall	.+194    	; 0x1f9c <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    1eda:	f5 e4       	ldi	r31, 0x45	; 69
    1edc:	ff 12       	cpse	r15, r31
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <main+0xde>
    1ee0:	ff cf       	rjmp	.-2      	; 0x1ee0 <main+0xdc>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_ERASE,0);
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	50 e0       	ldi	r21, 0x00	; 0
    1ee6:	63 e0       	ldi	r22, 0x03	; 3
    1ee8:	c5 01       	movw	r24, r10
    1eea:	39 d0       	rcall	.+114    	; 0x1f5e <do_spm>
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
	    uint16_t addrPtr = (uint16_t)(void*)address;
    1eec:	75 01       	movw	r14, r10
	 * the default rather than checking for the correct code, we save
	 * space on chips that don't support any other memory types.
	 */
	{
	    // Copy buffer into programming buffer
	    uint8_t *bufPtr = mybuff;
    1eee:	00 e6       	ldi	r16, 0x60	; 96
    1ef0:	10 e0       	ldi	r17, 0x00	; 0
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    1ef2:	f8 01       	movw	r30, r16
    1ef4:	40 81       	ld	r20, Z
    1ef6:	0e 5f       	subi	r16, 0xFE	; 254
    1ef8:	1f 4f       	sbci	r17, 0xFF	; 255
    1efa:	31 96       	adiw	r30, 0x01	; 1
		a |= (*bufPtr++) << 8;
    1efc:	80 81       	ld	r24, Z
    1efe:	50 e0       	ldi	r21, 0x00	; 0
    1f00:	58 2b       	or	r21, r24
		do_spm((uint16_t)(void*)addrPtr,__BOOT_PAGE_FILL,a);
    1f02:	61 e0       	ldi	r22, 0x01	; 1
    1f04:	c7 01       	movw	r24, r14
    1f06:	2b d0       	rcall	.+86     	; 0x1f5e <do_spm>
		addrPtr += 2;
    1f08:	f2 e0       	ldi	r31, 0x02	; 2
    1f0a:	ef 0e       	add	r14, r31
    1f0c:	f1 1c       	adc	r15, r1
	    } while (len -= 2);
    1f0e:	d0 12       	cpse	r13, r16
    1f10:	f0 cf       	rjmp	.-32     	; 0x1ef2 <main+0xee>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    do_spm((uint16_t)(void*)address,__BOOT_PAGE_WRITE,0);
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	65 e0       	ldi	r22, 0x05	; 5
    1f18:	c5 01       	movw	r24, r10
    1f1a:	21 d0       	rcall	.+66     	; 0x1f5e <do_spm>
    1f1c:	1d c0       	rjmp	.+58     	; 0x1f58 <main+0x154>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    1f1e:	84 37       	cpi	r24, 0x74	; 116
    1f20:	69 f4       	brne	.+26     	; 0x1f3c <main+0x138>
      uint8_t desttype;
      GETLENGTH(length);
    1f22:	31 d0       	rcall	.+98     	; 0x1f86 <getch>
    1f24:	30 d0       	rcall	.+96     	; 0x1f86 <getch>
    1f26:	f8 2e       	mov	r15, r24

      desttype = getch();
    1f28:	2e d0       	rcall	.+92     	; 0x1f86 <getch>

      verifySpace();
    1f2a:	38 d0       	rcall	.+112    	; 0x1f9c <verifySpace>
    1f2c:	85 01       	movw	r16, r10
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    1f2e:	f8 01       	movw	r30, r16
    1f30:	85 91       	lpm	r24, Z+
    1f32:	8f 01       	movw	r16, r30
    1f34:	24 d0       	rcall	.+72     	; 0x1f7e <putch>
	} while (--length);
    1f36:	fa 94       	dec	r15
    1f38:	d1 f7       	brne	.-12     	; 0x1f2e <main+0x12a>
    1f3a:	0e c0       	rjmp	.+28     	; 0x1f58 <main+0x154>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    1f3c:	85 37       	cpi	r24, 0x75	; 117
    1f3e:	39 f4       	brne	.+14     	; 0x1f4e <main+0x14a>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f40:	2d d0       	rcall	.+90     	; 0x1f9c <verifySpace>
      putch(SIGNATURE_0);
    1f42:	8e e1       	ldi	r24, 0x1E	; 30
    1f44:	1c d0       	rcall	.+56     	; 0x1f7e <putch>
      putch(SIGNATURE_1);
    1f46:	83 e9       	ldi	r24, 0x93	; 147
    1f48:	1a d0       	rcall	.+52     	; 0x1f7e <putch>
      putch(SIGNATURE_2);
    1f4a:	88 e0       	ldi	r24, 0x08	; 8
    1f4c:	99 cf       	rjmp	.-206    	; 0x1e80 <main+0x7c>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f4e:	81 35       	cpi	r24, 0x51	; 81
    1f50:	11 f4       	brne	.+4      	; 0x1f56 <main+0x152>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f52:	88 e0       	ldi	r24, 0x08	; 8
    1f54:	1f d0       	rcall	.+62     	; 0x1f94 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1f56:	22 d0       	rcall	.+68     	; 0x1f9c <verifySpace>
    }
    putch(STK_OK);
    1f58:	80 e1       	ldi	r24, 0x10	; 16
    1f5a:	11 d0       	rcall	.+34     	; 0x1f7e <putch>
  }
    1f5c:	81 cf       	rjmp	.-254    	; 0x1e60 <main+0x5c>

00001f5e <do_spm>:
 *   you could do fill-erase-write sequence with data!=0 in ERASE and
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    1f5e:	fc 01       	movw	r30, r24
    1f60:	0a 01       	movw	r0, r20
    1f62:	67 bf       	out	0x37, r22	; 55
    1f64:	e8 95       	spm
    1f66:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    1f68:	07 b6       	in	r0, 0x37	; 55
    1f6a:	00 fc       	sbrc	r0, 0
    1f6c:	fd cf       	rjmp	.-6      	; 0x1f68 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    1f6e:	66 70       	andi	r22, 0x06	; 6
    1f70:	29 f0       	breq	.+10     	; 0x1f7c <do_spm+0x1e>
    1f72:	45 2b       	or	r20, r21
    1f74:	19 f4       	brne	.+6      	; 0x1f7c <do_spm+0x1e>
      // Reenable read access to flash
      boot_rww_enable();
    1f76:	81 e1       	ldi	r24, 0x11	; 17
    1f78:	87 bf       	out	0x37, r24	; 55
    1f7a:	e8 95       	spm
    1f7c:	08 95       	ret

00001f7e <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    1f7e:	5d 9b       	sbis	0x0b, 5	; 11
    1f80:	fe cf       	rjmp	.-4      	; 0x1f7e <putch>
  UART_UDR = ch;
    1f82:	8c b9       	out	0x0c, r24	; 12
    1f84:	08 95       	ret

00001f86 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    1f86:	5f 9b       	sbis	0x0b, 7	; 11
    1f88:	fe cf       	rjmp	.-4      	; 0x1f86 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    1f8a:	5c 99       	sbic	0x0b, 4	; 11
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f8e:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    1f90:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    1f92:	08 95       	ret

00001f94 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f94:	98 e1       	ldi	r25, 0x18	; 24
    1f96:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    1f98:	81 bd       	out	0x21, r24	; 33
    1f9a:	08 95       	ret

00001f9c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f9c:	f4 df       	rcall	.-24     	; 0x1f86 <getch>
    1f9e:	80 32       	cpi	r24, 0x20	; 32
    1fa0:	19 f0       	breq	.+6      	; 0x1fa8 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fa2:	88 e0       	ldi	r24, 0x08	; 8
    1fa4:	f7 df       	rcall	.-18     	; 0x1f94 <watchdogConfig>
    1fa6:	ff cf       	rjmp	.-2      	; 0x1fa6 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fa8:	84 e1       	ldi	r24, 0x14	; 20
    1faa:	e9 cf       	rjmp	.-46     	; 0x1f7e <putch>

00001fac <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    1fac:	cf 93       	push	r28
    1fae:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fb0:	ea df       	rcall	.-44     	; 0x1f86 <getch>
    1fb2:	c1 50       	subi	r28, 0x01	; 1
    1fb4:	e9 f7       	brne	.-6      	; 0x1fb0 <getNch+0x4>
  verifySpace();
}
    1fb6:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fb8:	f1 cf       	rjmp	.-30     	; 0x1f9c <verifySpace>

00001fba <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    1fba:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	ea df       	rcall	.-44     	; 0x1f94 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    1fc0:	e0 e0       	ldi	r30, 0x00	; 0
    1fc2:	ff 27       	eor	r31, r31
    1fc4:	09 94       	ijmp
